From 37840827c4073dedfd37915a74eb8fe0c44843c3 Mon Sep 17 00:00:00 2001
From: Thomas Freitag <Thomas.Freitag@alfa.de>
Date: Wed, 2 Dec 2015 22:15:33 +0100
Subject: [PATCH] Ignore the alternateSpace and tintTransform

As a reasonable compromise in my eyes this new patch
now also checks the alternate colorspace, and if this
is DeviceGray in case of a separation colorspace with
name black this patch treats is as if it is really a
DeviceGray and so ignore tintTransform and alternate
colorspace just in this case when using getGray() and getRGB().

Bug #92381
---
 poppler/GfxState.cc | 64 +++++++++++++++++++++++++++++++++------------
 1 file changed, 48 insertions(+), 16 deletions(-)

Index: poppler-0.26.5/poppler/GfxState.cc
===================================================================
--- poppler-0.26.5.orig/poppler/GfxState.cc	2019-09-26 14:15:30.713631010 +0200
+++ poppler-0.26.5/poppler/GfxState.cc	2019-09-26 14:15:30.705631010 +0200
@@ -2738,12 +2738,16 @@
   GfxColor color2;
   int i;
 
-  x = colToDbl(color->c[0]);
-  func->transform(&x, c);
-  for (i = 0; i < alt->getNComps(); ++i) {
-    color2.c[i] = dblToCol(c[i]);
+  if (alt->getMode() == csDeviceGray && name->cmp("Black") == 0) {
+    *gray = clip01(gfxColorComp1 - color->c[0]);
+  } else {
+    x = colToDbl(color->c[0]);
+    func->transform(&x, c);
+    for (i = 0; i < alt->getNComps(); ++i) {
+      color2.c[i] = dblToCol(c[i]);
+    }
+    alt->getGray(&color2, gray);
   }
-  alt->getGray(&color2, gray);
 }
 
 void GfxSeparationColorSpace::getRGB(GfxColor *color, GfxRGB *rgb) {
@@ -2752,12 +2756,18 @@
   GfxColor color2;
   int i;
 
-  x = colToDbl(color->c[0]);
-  func->transform(&x, c);
-  for (i = 0; i < alt->getNComps(); ++i) {
-    color2.c[i] = dblToCol(c[i]);
+  if (alt->getMode() == csDeviceGray && name->cmp("Black") == 0) {
+    rgb->r = clip01(gfxColorComp1 - color->c[0]);
+    rgb->g = clip01(gfxColorComp1 - color->c[0]);
+    rgb->b = clip01(gfxColorComp1 - color->c[0]);
+  } else {
+    x = colToDbl(color->c[0]);
+    func->transform(&x, c);
+    for (i = 0; i < alt->getNComps(); ++i) {
+      color2.c[i] = dblToCol(c[i]);
+    }
+    alt->getRGB(&color2, rgb);
   }
-  alt->getRGB(&color2, rgb);
 }
 
 void GfxSeparationColorSpace::getCMYK(GfxColor *color, GfxCMYK *cmyk) {
@@ -2766,12 +2776,34 @@
   GfxColor color2;
   int i;
 
-  x = colToDbl(color->c[0]);
-  func->transform(&x, c);
-  for (i = 0; i < alt->getNComps(); ++i) {
-    color2.c[i] = dblToCol(c[i]);
+  if (name->cmp("Black") == 0) {
+    cmyk->c = 0;
+    cmyk->m = 0;
+    cmyk->y = 0;
+    cmyk->k = color->c[0];
+  } else if (name->cmp("Cyan") == 0) {
+    cmyk->c = color->c[0];
+    cmyk->m = 0;
+    cmyk->y = 0;
+    cmyk->k = 0;
+  } else if (name->cmp("Magenta") == 0) {
+    cmyk->c = 0;
+    cmyk->m = color->c[0];
+    cmyk->y = 0;
+    cmyk->k = 0;
+  } else if (name->cmp("Yellow") == 0) {
+    cmyk->c = 0;
+    cmyk->m = 0;
+    cmyk->y = color->c[0];
+    cmyk->k = 0;
+  } else {
+    x = colToDbl(color->c[0]);
+    func->transform(&x, c);
+    for (i = 0; i < alt->getNComps(); ++i) {
+      color2.c[i] = dblToCol(c[i]);
+    }
+    alt->getCMYK(&color2, cmyk);
   }
-  alt->getCMYK(&color2, cmyk);
 }
 
 void GfxSeparationColorSpace::getDeviceN(GfxColor *color, GfxColor *deviceN) {
